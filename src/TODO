### Structure Tree
# Manage the i/o coherence instead. 
# How should be the backende to make big scale learning with database and search engine interface...
#   * Spark/Hadoop interface... (hdfs = htable)
#
# use args...https://github.com/kennethreitz/args instead parser for fit.py
#
# @debug: clique and random generator tree path. Working ?
#
# @todo: 
#   * frontend: use for bas class for random network:
#   * integration of measure on degree, goodness of fit etc
#   * deal with the fact taht there no loading scheme here...
#   * OBJECT ! change frontendNetwork to Graph(Object), it is clear ?! (implement morphism in Object for example. (issue42)
#
# @purge: 
#   * model/lda
#   * clean and homogeneize, the communities analysis framework. There is redoncdancy, and non consistent call to modularity...
#

### Propriété:
    * homophily (ya t'il homophilie par attachement préférentiel)
    * attachement préférentiel par homopholie (nouveux liens / nouveaux noeud?) 

##### communauté
* equivalence struturelle (economie / partenariat)
* algo formelle (une communauté c'est une clique, k-clique / percolation)
* ensemble de neud fortement connecté, par rapport au reste du réseau.

-- voir impossibilité theorem
###### Dynamic

    (DHDP and other )
    * dynamicité rapide / lente -> gaussien? relaxation. -- evolutivité des graphes
        * split - merge community
        * cycle dans la dynamicity

# Mesures / Performance

* Baseline
    * RESCAL -> prediction !?
    * logit rescal
    * m3F
    * nonparam
    * MMSB ! (infinite - dynamic...)
    * IBP

## Mesure attachement prefarential:
    * proba que tout les lien à 0 soit liée ?
    -- comparé à aux leader (ceux qui ont un haut degré)

* Mesure cluistering: 
    * contingency table / cluster%precision rappel F mesure ?
    * NMI (Mutuel Information Normalization)
